{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Sygna Hub API",
    "title": "Sygna HUB",
    "contact": {},
    "version": "1.16.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "self"
        ],
        "summary": "get current release, version the path could be used for health check",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/schema.GetRootOutput"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "currencies"
        ],
        "summary": "get supported currencies",
        "operationId": "GetCurrencies",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter currencies by currency identifier",
            "name": "currency_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter currencies data by currency symbol",
            "name": "currency_symbol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter currencies data by currency name",
            "name": "currency_name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter currencies data by kyt providers",
            "name": "kyt_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter currencies by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Currency"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "get customers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by customer identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by customer name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter customers by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis V1",
                "Chainalysis V2",
                "Merkle Science",
                "Dow Jones",
                "Coinfirm"
              ],
              "type": "string"
            },
            "description": "filter customers by risk score provider",
            "name": "risk_score_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of max risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "name": "max_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of average risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "name": "avg_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by labels from KYT service searched",
            "name": "label",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by a range of last screened date(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "last_screened",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.GetCustomersOutput"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "update customers",
        "parameters": [
          {
            "description": "put /customers params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PutCustomersInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "create customers",
        "parameters": [
          {
            "description": "post /customers params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostCustomersInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "update customers",
        "parameters": [
          {
            "description": "patch /customers params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchCustomersInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers-export": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers-export"
        ],
        "summary": "generate customers report",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by customer identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by customer name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter customers by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis V1",
                "Chainalysis V2",
                "Merkle Science",
                "Dow Jones",
                "Coinfirm"
              ],
              "type": "string"
            },
            "description": "filter customers by risk score provider",
            "name": "risk_score_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of max risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "name": "max_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of average risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "name": "avg_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by labels from KYT service searched",
            "name": "label",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter customers by a range of last screened date(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "last_screened",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers-export/download": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "customers-export"
        ],
        "summary": "download customer report",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers-export/status": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers-export"
        ],
        "summary": "get customer report processing status",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/model.Report"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "get specific customer detail",
        "parameters": [
          {
            "type": "string",
            "description": "customer identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by ids in current customer",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by currency id in current customer",
            "name": "asset_currency_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by risk score in current customer",
            "name": "asset_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by address in current customer",
            "name": "asset_address",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by label in current customer",
            "name": "asset_label",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by value in current customer",
            "name": "asset_value",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter asset by last screen time in current customer",
            "name": "asset_last_screened",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/schema.GetCustomerOutput"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/data-transfer-export": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "data-transfer-export"
        ],
        "summary": "generate transaction report",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by customer name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction address",
            "name": "address",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction id on blockchain",
            "name": "tx_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction currency id",
            "name": "currency_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by a range of last screened(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "last_screened",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by risk score provider",
            "name": "risk_score_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "name": "risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
              ],
              "type": "integer"
            },
            "description": "filter transactions by transaction status(0:Processing,1:Blocked,2:Pending On Beneficiary,3:Transfer To Beneficiary Failed,4:Pending On Originator,5:Transfer To Originator Failed,6:Confirmed,7:Confirm Failed,8:Rejected)",
            "name": "status",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Processing",
                "Blocked",
                "Pending On Beneficiary",
                "Transfer To Beneficiary Failed",
                "Pending On Originator",
                "Transfer To Originator Failed",
                "Confirmed",
                "Confirm Failed",
                "Rejected"
              ],
              "type": "string"
            },
            "description": "filter transactions by transaction status text",
            "name": "status_text",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of value. This format should be {from,to} (ie.value=0.1,10.5 means filtering transactions by value between 0.1 and 10.5 inclusive).",
            "name": "value",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of sanction screening score. This format should be {from,to} (ie.sanction_score=0.1,10.5 means filtering transactions by sanction_score between 0.1 and 10.5 inclusive).",
            "name": "sanction_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Sygna_Bridge",
                "Sygna_EmailProtocol",
                "TRISA"
              ],
              "type": "string"
            },
            "description": "filter transactions by transaction protocol",
            "name": "protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/data-transfer-export/download": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "data-transfer-export"
        ],
        "summary": "download transactions report",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/data-transfer-export/status": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "data-transfer-export"
        ],
        "summary": "get transaction report processing status",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/model.Report"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/global-vasp": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could get encrypted credentials",
        "tags": [
          "global-vasp"
        ],
        "summary": "get global-vasp",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter global vasp by vasp identifier",
            "name": "vasp_identifier",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter global vasp data by vasp name",
            "name": "vasp_name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Sygna_Bridge",
                "Sygna_EmailProtocol",
                "TRISA",
                "VerifyVASP",
                "Notabene_TR:NOW",
                "Veriscope on Shyft"
              ],
              "type": "string"
            },
            "description": "filter global vasp data by protocol",
            "name": "protocol",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter global vasp data by extra_info's key",
            "name": "extra_info[key]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.GlobalVasp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/oauth2": {
      "post": {
        "tags": [
          "oauth2"
        ],
        "summary": "get oauth token",
        "parameters": [
          {
            "description": "post /oauth2 param",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.PostOauthInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "oauth2"
        ],
        "summary": "delete oauth token from database",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when you want to see a list of all validations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Ownership"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when you want to validate an address whether belong to a user who owns private wallet",
        "parameters": [
          {
            "description": "post /ownerships params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostOwnershipInput"
              }
            }
          },
          {
            "type": "boolean",
            "description": "the validation would be sent even if the addresses are risky",
            "name": "accept_high_risk",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/cancel": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "you couldn't validate some address that it is processing or accepted until you cancel it",
        "parameters": [
          {
            "description": "patch /ownerships/cancel params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchOwnershipIdInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/confirm": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when you received a reply from the receiver and you want to accept or reject the reply",
        "parameters": [
          {
            "description": "patch /ownerships/confirm params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchOwnershipConfirmInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/resend": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when a receiver lets you send a email again",
        "parameters": [
          {
            "description": "patch /ownerships/resend params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchOwnershipIdInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/unblock": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when the validation that including risky address wouldn't be sent until you unblock it",
        "parameters": [
          {
            "description": "patch /ownerships/unblock params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchOwnershipIdInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/validate": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when you get the ownership identifier from the link that you received and want to reply to the validation",
        "parameters": [
          {
            "description": "patch /ownerships/validate params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchOwnershipValidationInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/verify-token/{token}": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when you received a link that asks you to validate the address whether belong to you",
        "parameters": [
          {
            "type": "string",
            "description": "JWT token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/ownerships/{id}": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "ownerships"
        ],
        "summary": "the API would be used when you want to see a validation detail",
        "parameters": [
          {
            "type": "string",
            "description": "ownership identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/model.Ownership"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/rollback": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could get encrypted credentials",
        "tags": [
          "rollback"
        ],
        "summary": "get rollback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Rollback"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "rollback"
        ],
        "summary": "update rollback",
        "parameters": [
          {
            "description": "put /rollback params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PutRollbackInout"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could get encrypted credentials",
        "tags": [
          "services"
        ],
        "summary": "get services",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter services by service identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Sygna_Bridge",
                "Elliptic",
                "Chainalysis V1",
                "Chainalysis V2",
                "ComplyAdvantage",
                "Merkle Science",
                "TRISA",
                "Dow Jones",
                "Coinfirm"
              ],
              "type": "string"
            },
            "description": "filter services by provider",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Travel Rule",
                "Blockchain Analytics",
                "Sanction Screening"
              ],
              "type": "string"
            },
            "description": "filter services by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter services by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "activated",
                "deactivated",
                "disabled",
                "upcoming",
                "expired"
              ],
              "type": "string"
            },
            "description": "filter services by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter services by a range of start time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter services by a range of end time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Service"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method\nuse GET /services/supported to understand which credential is required by provider",
        "tags": [
          "services"
        ],
        "summary": "update services",
        "parameters": [
          {
            "description": "put /services params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PutServicesInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method\nuse GET /services/supported to understand which credential is required by provider",
        "tags": [
          "services"
        ],
        "summary": "create services",
        "parameters": [
          {
            "description": "post /services params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostServicesInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/services/supported": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "services"
        ],
        "summary": "get supported services and its config",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter services by service identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Sygna_Bridge",
                "Elliptic",
                "Chainalysis V1",
                "Chainalysis V2",
                "ComplyAdvantage",
                "Merkle Science",
                "TRISA",
                "Dow Jones",
                "Coinfirm"
              ],
              "type": "string"
            },
            "description": "filter services by provider",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Travel Rule",
                "Blockchain Analytics",
                "Sanction Screening"
              ],
              "type": "string"
            },
            "description": "filter services by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter services by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter services by editable",
            "name": "editable",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.SupportedService"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could get encrypted credentials",
        "tags": [
          "settings"
        ],
        "summary": "get settings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Setting"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "settings"
        ],
        "summary": "update settings",
        "parameters": [
          {
            "description": "put /settings params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostSettingInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "settings"
        ],
        "summary": "create settings",
        "parameters": [
          {
            "description": "post /settings params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostSettingInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/settings/default": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "settings"
        ],
        "summary": "get default settings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostSettingInput"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/settings/supported": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "settings"
        ],
        "summary": "get supported settings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.SupportedSetting"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "get transactions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by customer name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction address",
            "name": "address",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction id on blockchain",
            "name": "tx_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by transaction currency id",
            "name": "currency_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by a range of last screened(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "last_screened",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter transactions by risk score provider",
            "name": "risk_score_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "name": "risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
              ],
              "type": "integer"
            },
            "description": "filter transactions by transaction status(0:Processing,1:Blocked,2:Pending On Beneficiary,3:Transfer To Beneficiary Failed,4:Pending On Originator,5:Transfer To Originator Failed,6:Confirmed,7:Confirm Failed,8:Rejected)",
            "name": "status",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Processing",
                "Blocked",
                "Pending On Beneficiary",
                "Transfer To Beneficiary Failed",
                "Pending On Originator",
                "Transfer To Originator Failed",
                "Confirmed",
                "Confirm Failed",
                "Rejected"
              ],
              "type": "string"
            },
            "description": "filter transactions by transaction status text",
            "name": "status_text",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of value. This format should be {from,to} (ie.value=0.1,10.5 means filtering transactions by value between 0.1 and 10.5 inclusive).",
            "name": "value",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A URL parameter that specifies the range of sanction screening score. This format should be {from,to} (ie.sanction_score=0.1,10.5 means filtering transactions by sanction_score between 0.1 and 10.5 inclusive).",
            "name": "sanction_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Sygna_Bridge",
                "Sygna_EmailProtocol",
                "TRISA"
              ],
              "type": "string"
            },
            "description": "filter transactions by transaction protocol",
            "name": "protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.GetTransactionsOutput"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "create transactions",
        "parameters": [
          {
            "description": "post /transactions params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PostTransactionInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/deposits": {
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "send email to originator VASP and ask him to fill customer information",
        "parameters": [
          {
            "description": "post /transactions/email-protocol/deposits params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PostEmailProtocolDepositInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/deposits/permission": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "accept or reject this transaction when received customer information from originator",
        "parameters": [
          {
            "description": "patch /transactions/email-protocol/deposits/permission params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchPermissionInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/deposits/permission-request": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "send own customer information to beneficiary or reject this request when received email from beneficiary",
        "parameters": [
          {
            "description": "patch /transactions/email-protocol/deposits/permission-request params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostEmailProtocolPermissionInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/deposits/txid": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "send transaction hash when received accept from beneficiary",
        "parameters": [
          {
            "description": "patch /transactions/email-protocol/deposits/txid params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchTxIdInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/permission": {
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "send permission to originator from email protocol VASP",
        "parameters": [
          {
            "description": "post /transactions/email-protocol/permission params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostEmailProtocolPermissionInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/verify-token/{token}": {
      "get": {
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "verify if token is valid and get its transaction identifier",
        "parameters": [
          {
            "type": "string",
            "description": "JWT token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/permission": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "send permission to originator",
        "parameters": [
          {
            "description": "patch /transactions/permission params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchPermissionInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/sanction-match": {
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "let user do sanction screening",
        "parameters": [
          {
            "description": "post /transactions/sanction-match params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.PostSanctionMatchInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sanctionscreening.GetSanctionScoreOutput"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/sanction-report/{searchId}": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "transactions"
        ],
        "summary": "get report from sanction screening service",
        "parameters": [
          {
            "type": "string",
            "description": "an identifier from sanction screening service",
            "name": "searchId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "binary",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/status": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "unblock or cancel transactions",
        "parameters": [
          {
            "description": "patch /transactions/status params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchTransactionsStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/txid": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "send transaction identifier on blockchain to beneficiary",
        "parameters": [
          {
            "description": "patch /transactions/txid params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchTxIdInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/wallet-address-filter": {
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "use /wallet-address-filter from Sygna Bridge and use KYT service by own credential to get address information",
        "parameters": [
          {
            "description": "post /transactions/wallet-address-filter params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostWalletAddressFilterInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/schema.PostWalletAddressFilterOutput"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "get specific transaction",
        "parameters": [
          {
            "type": "string",
            "description": "transaction identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/schema.GetTransactionOutput"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could use this method",
        "tags": [
          "users"
        ],
        "summary": "get all users",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter users by identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            },
            "description": "filter users by role identifier(0:admin 1:member)",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter users by login account",
            "name": "account",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "password",
                "google"
              ],
              "type": "string"
            },
            "description": "filter users by login type(only supported password and google now)",
            "name": "login_type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "filter users by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.User"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could use this method",
        "tags": [
          "users"
        ],
        "summary": "create users",
        "parameters": [
          {
            "description": "post /users params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostUsersInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could use this method\nall accounts would be logout if admin deleted them",
        "tags": [
          "users"
        ],
        "summary": "delete users(member)",
        "parameters": [
          {
            "description": "patch /users params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.DeleteUsersInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only admin could use this method\nall accounts would be logout if admin deactivated them",
        "tags": [
          "users"
        ],
        "summary": "activate or deactivate users(member)",
        "parameters": [
          {
            "description": "patch /users params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchUsersInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/users/change-password": {
      "patch": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "admin or member only could change self password\nall accounts would be logout if one of users changed password\nuser must use password to login if he want to change his password",
        "tags": [
          "users"
        ],
        "summary": "change login password",
        "parameters": [
          {
            "description": "patch /users/change-password params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.ChangePasswordInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithStatusAndMessage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/users/link": {
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "admin or member could only link self account",
        "tags": [
          "users"
        ],
        "summary": "link your account to third party service",
        "parameters": [
          {
            "description": "post /users/link params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.PostUsersLinkInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithStatusAndMessage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/users/link/{login_type}": {
      "delete": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "admin or member could only unlink self account\nall accounts which linked with specific third party service would be logout if one of users unlinked",
        "tags": [
          "users"
        ],
        "summary": "unlink your account from third party service",
        "parameters": [
          {
            "type": "string",
            "description": "login type which you want to unlink",
            "name": "login_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithStatusAndMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "admin could get specific or self user data\nmember could only get self user data",
        "tags": [
          "users"
        ],
        "summary": "get specific or self user data",
        "parameters": [
          {
            "type": "string",
            "description": "specific user identifier or 'self' to get self user data",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/model.User"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/vendors/bridge/sync": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "vendors"
        ],
        "summary": "Synchronize Sygna Bridge Transactions",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/vendors/shyft/attestations/sync": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "tags": [
          "vendors"
        ],
        "summary": "Synchronize Shyft Attestations",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/vendors/test": {
      "post": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "only allow admin to use this method\nonly support Sygna_Bridge,ComplyAdvantage,Elliptic,Chainalysis V1,Chainalysis V2,Merkle Science,TRISA,Dow Jones,Coinfirm for provider now\nonly support Travel Rule,Blockchain Analytics,Sanction Screening for type now",
        "tags": [
          "vendors"
        ],
        "summary": "test if third-party service is available",
        "parameters": [
          {
            "description": "post /vendors/test params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostVendorsTestInput"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.PostVendorsTestOutput"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errors.SystemError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "extra_data": {
          "type": "object"
        },
        "help": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stack": {
          "type": "object"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "model.Addr": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        }
      }
    },
    "model.BeneficiaryPrivateInfo": {
      "type": "object",
      "properties": {
        "natural_person_name": {
          "$ref": "#/definitions/model.NaturalPersonName"
        },
        "legal_person_name": {
          "$ref": "#/definitions/model.LegalPersonName"
        }
      }
    },
    "model.Currency": {
      "type": "object",
      "properties": {
        "addr_extra_info": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "currency_name": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_kyt_supported": {
          "type": "boolean"
        },
        "kyt_providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "platform": {
          "$ref": "#/definitions/model.Platform"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "model.GlobalVasp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "extra_info": {
          "$ref": "#/definitions/model.Object"
        },
        "id": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "vasp_identifier": {
          "type": "string"
        },
        "vasp_name": {
          "type": "string"
        },
        "vasp_server_status": {
          "type": "string"
        }
      }
    },
    "model.LegalPersonName": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "local_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phonetic_name": {
          "type": "string"
        }
      }
    },
    "model.Login": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "last_login": {
          "type": "string"
        },
        "last_password_change": {
          "type": "string"
        },
        "login_type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "model.NameObject": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        }
      }
    },
    "model.NaturalPersonName": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "local_name": {
          "$ref": "#/definitions/model.NameObject"
        },
        "name": {
          "$ref": "#/definitions/model.NameObject"
        },
        "phonetic_name": {
          "$ref": "#/definitions/model.NameObject"
        }
      }
    },
    "model.Object": {
      "type": "object",
      "additionalProperties": true
    },
    "model.Ownership": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.OwnershipAsset"
          }
        },
        "created_at": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/model.Object"
        },
        "id": {
          "type": "string"
        },
        "owner_email": {
          "type": "string"
        },
        "owner_info": {
          "type": "object"
        },
        "sender_email": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "status_text": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "model.OwnershipAsset": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "currency_name": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_screened": {
          "type": "string"
        },
        "reject_code": {
          "type": "string"
        },
        "reject_message": {
          "type": "string"
        },
        "risk_score": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "txid": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "validation_status": {
          "type": "integer"
        },
        "validation_status_text": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "model.Platform": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        }
      }
    },
    "model.PostEmailProtocolDepositInput": {
      "type": "object",
      "required": [
        "currency_id",
        "customer_id",
        "originator",
        "value"
      ],
      "properties": {
        "beneficiary": {
          "type": "object",
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.Addr"
              }
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "currency_id": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "originator": {
          "type": "object",
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.Addr"
              }
            }
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "model.PostTransactionInput": {
      "type": "object",
      "required": [
        "beneficiary",
        "currency_id",
        "customer_id",
        "originator",
        "value"
      ],
      "properties": {
        "beneficiary": {
          "type": "object",
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.Addr"
              }
            },
            "customer_type": {
              "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
              "type": "integer"
            },
            "private_info": {
              "$ref": "#/definitions/model.BeneficiaryPrivateInfo"
            },
            "vasp_code": {
              "type": "string"
            }
          }
        },
        "currency_id": {
          "description": "Choose target currency identifier from GET /currencies",
          "type": "string"
        },
        "customer_id": {
          "description": "Choose target identifier from GET /customers",
          "type": "string"
        },
        "expire_date": {
          "type": "integer"
        },
        "forced_sending_when_VASP_is_not_healthy": {
          "type": "boolean"
        },
        "need_validate_address": {
          "type": "boolean"
        },
        "originator": {
          "description": "Choose asset identifiers from GET /customers/:id or input addresses belong to above customer identifier",
          "type": "object",
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.Addr"
              }
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "protocol": {
          "type": "string",
          "enum": [
            "null",
            "Sygna_Bridge",
            "Sygna_EmailProtocol",
            "TRISA"
          ],
          "x-nullable": true
        },
        "protocol_extra_info": {
          "type": "object"
        },
        "txid": {
          "type": "string"
        },
        "value": {
          "description": "The value of the currency requested to transfer.",
          "type": "string"
        }
      }
    },
    "model.Report": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/model.Object"
        },
        "file_path": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "report_status": {
          "type": "integer"
        },
        "report_status_text": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "vasp_code": {
          "type": "string"
        }
      }
    },
    "model.Rollback": {
      "type": "object",
      "properties": {
        "gorm_version": {
          "type": "string"
        },
        "rollback_id": {
          "type": "string"
        },
        "sql_version": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "model.Service": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "credential": {
          "description": "this field is plain text",
          "type": "object"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "settings": {
          "type": "object"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "vasp_code": {
          "type": "string"
        }
      }
    },
    "model.Setting": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "rule": {
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "vasp_code": {
          "type": "string"
        }
      }
    },
    "model.SupportedService": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "credential": {
          "type": "object"
        },
        "editable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "settings": {
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "model.SupportedSetting": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "rule": {
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "model.User": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "logins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Login"
          }
        },
        "role_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "sanctionscreening.GetSanctionScoreOutput": {
      "type": "object",
      "properties": {
        "profile_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "score": {
          "type": "integer"
        }
      }
    },
    "schema.Address": {
      "type": "object",
      "properties": {
        "address_line": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "address_type": {
          "type": "string"
        },
        "building_name": {
          "type": "string"
        },
        "building_number": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "country_sub_division": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "district_name": {
          "type": "string"
        },
        "floor": {
          "type": "string"
        },
        "post_box": {
          "type": "string"
        },
        "post_code": {
          "type": "string"
        },
        "room": {
          "type": "string"
        },
        "street_name": {
          "type": "string"
        },
        "sub_department": {
          "type": "string"
        },
        "town_location_name": {
          "type": "string"
        },
        "town_name": {
          "type": "string"
        }
      }
    },
    "schema.Asset": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "risk_score": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_usd": {
          "type": "string"
        }
      }
    },
    "schema.ChangePasswordInput": {
      "type": "object",
      "required": [
        "new_password",
        "old_password"
      ],
      "properties": {
        "new_password": {
          "description": "new password must be follow below rules:\nat least 6 letters\nat least 1 number\nat least 1 upper case\nat least 1 special character",
          "type": "string"
        },
        "old_password": {
          "type": "string"
        }
      }
    },
    "schema.DateAndPlaceOfBirth": {
      "type": "object",
      "properties": {
        "date_of_birth": {
          "type": "string"
        },
        "place_of_birth": {
          "type": "string"
        }
      }
    },
    "schema.DeleteUsersInput": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "specific user identifier",
          "type": "string"
        }
      }
    },
    "schema.GetCustomerOutput": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.Asset"
          }
        },
        "avg_risk_score": {
          "type": "string"
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "max_risk_score": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        },
        "protocol_extra_info": {
          "type": "object"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schema.GetCustomersOutput": {
      "type": "object",
      "properties": {
        "avg_risk_score": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "customer_id": {
          "description": "Name              string                  `json:\"name\"`",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "legal_person_name": {
          "$ref": "#/definitions/model.LegalPersonName"
        },
        "max_risk_score": {
          "type": "string"
        },
        "natural_person_name": {
          "$ref": "#/definitions/model.NaturalPersonName"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schema.GetRootOutput": {
      "type": "object",
      "properties": {
        "release": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "schema.GetTransactionOutput": {
      "type": "object",
      "required": [
        "created_at",
        "currency_id",
        "direction",
        "id",
        "protocol",
        "status",
        "status_text",
        "updated_at",
        "value"
      ],
      "properties": {
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/schema.GetCustomerOutput"
        },
        "direction": {
          "type": "integer"
        },
        "high_risk": {
          "description": "if your KYT service is Elliptic, high_risk would be true when maximum risk score of address in this transaction is greater than score which is mantain in /services ;\nif your KYT service is Chainalysis, high_risk would be true when one of addresses is high in result which scanned by Chainalysis\nif sanction_score is greater than 0, high_risk would be true",
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "max_risk_score": {
          "type": "string"
        },
        "protocol": {
          "description": "The default is Sygna_Bridge",
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "sanction_report_link": {
          "description": "sanction_report_link would be valuable if sanction screening service is enabled, it provides a report to download",
          "type": "string"
        },
        "sanction_score": {
          "description": "sanction_score would be valuable if sanction screening service is enabled",
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "status_text": {
          "type": "string"
        },
        "transaction_asset": {
          "$ref": "#/definitions/schema.TransactionAsset"
        },
        "transfer_id": {
          "type": "string"
        },
        "tx_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_usd": {
          "type": "string"
        }
      }
    },
    "schema.GetTransactionsOutput": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "currency_name": {
          "type": "string"
        },
        "currency_symbol": {
          "type": "string"
        },
        "customer_id": {
          "description": "Name                  string                      `json:\"name,omitempty\"`",
          "type": "string"
        },
        "direction": {
          "type": "integer"
        },
        "expire_date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "legal_person_name": {
          "$ref": "#/definitions/model.LegalPersonName"
        },
        "natural_person_name": {
          "$ref": "#/definitions/model.NaturalPersonName"
        },
        "protocol": {
          "type": "string"
        },
        "protocol_extra_info": {
          "description": "for shyft, we need to know what kind of block it is (orig addr or permission)",
          "$ref": "#/definitions/model.Object"
        },
        "risk_score": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "sanction_score": {
          "type": "integer"
        },
        "sanction_score_provider": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "status_text": {
          "type": "string"
        },
        "transfer_id": {
          "type": "string"
        },
        "tx_id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_usd": {
          "description": "only used in response",
          "type": "string"
        }
      }
    },
    "schema.LegalPersonName": {
      "type": "object",
      "properties": {
        "local_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phonetic_name": {
          "type": "string"
        }
      }
    },
    "schema.NameObject": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        }
      }
    },
    "schema.NationalIdentification": {
      "type": "object",
      "properties": {
        "country_of_issue": {
          "type": "string"
        },
        "national_identifier": {
          "type": "string"
        },
        "national_identifier_type": {
          "type": "string"
        },
        "registration_authority": {
          "type": "string"
        }
      }
    },
    "schema.NaturalPersonName": {
      "type": "object",
      "properties": {
        "local_name": {
          "$ref": "#/definitions/schema.NameObject"
        },
        "name": {
          "$ref": "#/definitions/schema.NameObject"
        },
        "phonetic_name": {
          "$ref": "#/definitions/schema.NameObject"
        }
      }
    },
    "schema.PagingResult": {
      "type": "object",
      "required": [
        "has_next",
        "limit",
        "offset",
        "total"
      ],
      "properties": {
        "has_next": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer"
        },
        "next_offset": {
          "description": "next_offset is valuable when has_next is true",
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "schema.PatchAssetInput": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "extra_info": {},
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "schema.PatchCustomersInput": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchAssetInput"
          }
        },
        "assets_ignore_kyt": {
          "type": "boolean"
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "legal_person_name": {
          "$ref": "#/definitions/schema.LegalPersonName"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        },
        "natural_person_name": {
          "$ref": "#/definitions/schema.NaturalPersonName"
        }
      }
    },
    "schema.PatchOwnershipAssetValidationAcceptInput": {
      "type": "object",
      "required": [
        "id",
        "txid"
      ],
      "properties": {
        "id": {
          "description": "Target asset identifier which you want to accept",
          "type": "string",
          "format": "uuid"
        },
        "txid": {
          "description": "Transaction identifier on blockchain",
          "type": "string"
        }
      }
    },
    "schema.PatchOwnershipAssetValidationConfirmInput": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Target asset identifier which you want to accept",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "schema.PatchOwnershipAssetValidationRejectInput": {
      "type": "object",
      "required": [
        "id",
        "reject_code",
        "reject_message"
      ],
      "properties": {
        "id": {
          "description": "Target asset identifier which you want to accept",
          "type": "string",
          "format": "uuid"
        },
        "reject_code": {
          "description": "Reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string",
          "enum": [
            "BVRC001",
            "BVRC002",
            "BVRC003",
            "BVRC004",
            "BVRC005",
            "BVRC006",
            "BVRC007",
            "BVRC999"
          ]
        },
        "reject_message": {
          "description": "Reply detail why you reject.",
          "type": "string"
        }
      }
    },
    "schema.PatchOwnershipConfirmInput": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "accept": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchOwnershipAssetValidationConfirmInput"
          }
        },
        "id": {
          "description": "Target ownership identifier",
          "type": "string",
          "format": "uuid"
        },
        "reject": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchOwnershipAssetValidationRejectInput"
          }
        }
      }
    },
    "schema.PatchOwnershipIdInput": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Target ownership identifier",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "schema.PatchOwnershipValidationInput": {
      "type": "object",
      "properties": {
        "accept": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchOwnershipAssetValidationAcceptInput"
          }
        },
        "owner_info": {
          "type": "object"
        },
        "reject": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchOwnershipAssetValidationRejectInput"
          }
        }
      }
    },
    "schema.PatchPermissionInput": {
      "type": "object",
      "required": [
        "id",
        "permission_status"
      ],
      "properties": {
        "forced_sending_when_VASP_is_not_healthy": {
          "type": "boolean"
        },
        "id": {
          "description": "Target transaction identifier which status is Pending On Beneficiary",
          "type": "string",
          "format": "uuid"
        },
        "permission_status": {
          "description": "Status of the transfer permission, 0 for accept, 1 for reject",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "reject_code": {
          "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string",
          "enum": [
            "BVRC001",
            "BVRC002",
            "BVRC003",
            "BVRC004",
            "BVRC005",
            "BVRC006",
            "BVRC007",
            "BVRC999"
          ]
        },
        "reject_message": {
          "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string"
        }
      }
    },
    "schema.PatchTransactionsStatus": {
      "type": "object",
      "required": [
        "action",
        "id"
      ],
      "properties": {
        "action": {
          "description": "Action\n* 0 - Unblock\n* 1 - Cancel",
          "type": "integer"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "schema.PatchTxIdInput": {
      "type": "object",
      "required": [
        "id",
        "txid"
      ],
      "properties": {
        "id": {
          "description": "Target transaction identifier which status is Pending On Originator",
          "type": "string",
          "format": "uuid"
        },
        "txid": {
          "description": "Transaction identifier on blockchain",
          "type": "string"
        }
      }
    },
    "schema.PatchUsersInput": {
      "type": "object",
      "required": [
        "id",
        "is_active"
      ],
      "properties": {
        "id": {
          "description": "specific user identifier",
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        }
      }
    },
    "schema.PostAssetInput": {
      "type": "object",
      "required": [
        "address",
        "currency_id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "schema.PostCustomersInput": {
      "type": "object",
      "required": [
        "assets",
        "country",
        "customer_type"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PostAssetInput"
          }
        },
        "assets_ignore_kyt": {
          "type": "boolean"
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "legal_person_name": {
          "$ref": "#/definitions/model.LegalPersonName"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        },
        "natural_person_name": {
          "$ref": "#/definitions/model.NaturalPersonName"
        }
      }
    },
    "schema.PostEmailProtocolPermissionInput": {
      "type": "object",
      "required": [
        "id",
        "permission_status"
      ],
      "properties": {
        "customer": {
          "description": "customer is required if permission_status is ACCEPTED",
          "$ref": "#/definitions/schema.PostCustomersInput"
        },
        "forced_sending_when_VASP_is_not_healthy": {
          "type": "boolean"
        },
        "id": {
          "description": "Target transaction identifier which status is Pending On Beneficiary",
          "type": "string",
          "format": "uuid"
        },
        "permission_status": {
          "description": "Status of the transfer permission, 0 for accept, 1 for reject",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "reject_code": {
          "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string",
          "enum": [
            "BVRC001",
            "BVRC002",
            "BVRC003",
            "BVRC004",
            "BVRC005",
            "BVRC006",
            "BVRC007",
            "BVRC999"
          ]
        },
        "reject_message": {
          "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string"
        }
      }
    },
    "schema.PostOauthInput": {
      "type": "object",
      "required": [
        "account",
        "credential"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "credential": {
          "type": "string"
        },
        "login_type": {
          "type": "string",
          "enum": [
            "password",
            "google"
          ]
        }
      }
    },
    "schema.PostOwnershipAssetInput": {
      "type": "object",
      "required": [
        "address",
        "currency_id",
        "value"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "schema.PostOwnershipInput": {
      "type": "object",
      "required": [
        "assets",
        "owner_email"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PostOwnershipAssetInput"
          }
        },
        "assets_ignore_kyt": {
          "type": "boolean"
        },
        "owner_email": {
          "type": "string",
          "format": "email"
        },
        "sender_email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "schema.PostSanctionMatchInput": {
      "type": "object",
      "required": [
        "customer_type",
        "name"
      ],
      "properties": {
        "customer_type": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "schema.PostServicesInput": {
      "type": "object",
      "required": [
        "credential",
        "provider",
        "type"
      ],
      "properties": {
        "credential": {
          "type": "object"
        },
        "provider": {
          "type": "string",
          "enum": [
            "Elliptic",
            "Chainalysis V1",
            "Chainalysis V2",
            "ComplyAdvantage",
            "Merkle Science",
            "TRISA",
            "Sygna_Bridge",
            "Dow Jones",
            "Coinfirm"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "Blockchain Analytics",
            "Sanction Screening",
            "Travel Rule"
          ]
        }
      }
    },
    "schema.PostSettingInput": {
      "type": "object",
      "required": [
        "rule",
        "type"
      ],
      "properties": {
        "rule": {
          "type": "object"
        },
        "type": {
          "type": "string",
          "enum": [
            "blockchain_analytics_timing",
            "sanction_screening_timing"
          ]
        }
      }
    },
    "schema.PostUsersInput": {
      "type": "object",
      "required": [
        "account"
      ],
      "properties": {
        "account": {
          "description": "account should be valid email address",
          "type": "string"
        },
        "email_pw_to_user": {
          "description": "email_pw_to_user is optional and its default value is true.",
          "type": "boolean"
        },
        "password": {
          "description": "password is optional and it is generated if password is empty.\npassword must be follow below rules:\nat least 6 letters\nat least 1 number\nat least 1 upper case\nat least 1 special character",
          "type": "string"
        },
        "role_id": {
          "description": "role_id\n* 0 - admin\n* 1 - member\nrole_id is optional and its default value is 1(member).\nnotice: admin could not be created if there is admin in VASP.",
          "type": "integer"
        }
      }
    },
    "schema.PostUsersLinkInput": {
      "type": "object",
      "required": [
        "account",
        "login_type"
      ],
      "properties": {
        "account": {
          "description": "your account of third party service",
          "type": "string"
        },
        "credential": {
          "description": "your credential of third party service and it would be used to validate if your account is valid",
          "type": "string"
        },
        "login_type": {
          "description": "third party service name\nonly google is supported now",
          "type": "string"
        }
      }
    },
    "schema.PostVendorsTestInput": {
      "type": "object",
      "required": [
        "credential",
        "provider",
        "type"
      ],
      "properties": {
        "credential": {
          "type": "object"
        },
        "provider": {
          "type": "string",
          "enum": [
            "Sygna_Bridge",
            "Elliptic",
            "Chainalysis",
            "ComplyAdvantage",
            "Merkle Science",
            "TRISA",
            "Dow Jones",
            "Coinfirm"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "Travel Rule",
            "Blockchain Analytics",
            "Sanction Screening"
          ]
        }
      }
    },
    "schema.PostVendorsTestOutput": {
      "type": "object",
      "required": [
        "provider",
        "status_code",
        "type"
      ],
      "properties": {
        "error_message": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "provider": {
          "type": "string"
        },
        "status_code": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schema.PostWalletAddressFilterInput": {
      "type": "object",
      "required": [
        "addrs",
        "currency_id"
      ],
      "properties": {
        "addrs": {
          "description": "addresses which are searching information by Sygna Bridge",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currency_id": {
          "description": "choose target currency identifier from GET /currencies",
          "type": "string"
        }
      }
    },
    "schema.PostWalletAddressFilterOutput": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/errors.SystemError"
        },
        "extra_data": {
          "$ref": "#/definitions/types.H"
        },
        "is_vasp": {
          "description": "is_vasp indicates whether address belongs VASP",
          "type": "boolean"
        },
        "success": {
          "type": "boolean"
        },
        "type": {
          "description": "which type address belongs",
          "type": "string",
          "enum": [
            "SYGNA_VASP",
            "UNKNOWN",
            "FAILED",
            "OTHER_VASP",
            "PRIVATE_WALLET"
          ]
        }
      }
    },
    "schema.PutCustomersInput": {
      "type": "object",
      "required": [
        "assets",
        "country",
        "customer_type",
        "id",
        "is_active"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchAssetInput"
          }
        },
        "assets_ignore_kyt": {
          "type": "boolean"
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "is_active": {
          "type": "boolean"
        },
        "legal_person_name": {
          "$ref": "#/definitions/model.LegalPersonName"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        },
        "natural_person_name": {
          "$ref": "#/definitions/model.NaturalPersonName"
        }
      }
    },
    "schema.PutRollbackInout": {
      "type": "object",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "schema.PutServicesInput": {
      "type": "object",
      "required": [
        "credential",
        "is_active",
        "provider",
        "type"
      ],
      "properties": {
        "credential": {
          "type": "object"
        },
        "is_active": {
          "type": "boolean"
        },
        "provider": {
          "type": "string",
          "enum": [
            "Elliptic",
            "Chainalysis V1",
            "Chainalysis V2",
            "ComplyAdvantage",
            "Merkle Science",
            "TRISA",
            "Sygna_Bridge",
            "Dow Jones",
            "Coinfirm"
          ]
        },
        "settings": {
          "type": "object"
        },
        "type": {
          "type": "string",
          "enum": [
            "Blockchain Analytics",
            "Sanction Screening",
            "Travel Rule"
          ]
        }
      }
    },
    "schema.Resp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        }
      }
    },
    "schema.RespWithMutation": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "success"
            ],
            "properties": {
              "error": {
                "$ref": "#/definitions/errors.SystemError"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "schema.RespWithPaging": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "paging": {
          "$ref": "#/definitions/schema.PagingResult"
        }
      }
    },
    "schema.RespWithStatus": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "schema.RespWithStatusAndMessage": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "message",
            "success"
          ],
          "properties": {
            "message": {
              "type": "string",
              "example": "something"
            },
            "success": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "schema.TransactionAsset": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "risk_score": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        }
      }
    },
    "types.H": {
      "type": "object",
      "additionalProperties": true
    }
  },
  "securityDefinitions": {
    "CookieAuth": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  }
}