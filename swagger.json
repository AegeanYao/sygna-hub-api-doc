{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Sygna Hub API",
    "title": "Sygna HUB",
    "contact": {
      "name": "vince.lee",
      "email": "services@sygna.io"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/currencies": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only support BTC,ETH now",
        "tags": [
          "currencies"
        ],
        "summary": "get supported currencies",
        "operationId": "GetCurrencies",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "currency_id",
                "currency_symbol",
                "currency_name",
                "is_active",
                "extra_info"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies which column to show. If not specified, the default is *.",
            "name": "field",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter currencies by currency identifier",
            "name": "currency_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter currencies data by currency symbol",
            "name": "currency_symbol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter currencies data by currency name",
            "name": "currency_name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi",
            "description": "filter currencies by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.GetCurrenciesResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "get customers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "id",
                "name",
                "is_active",
                "risk_score_provider",
                "max_risk_score",
                "avg_risk_score",
                "labels",
                "created_at",
                "updated_at",
                "last_screened"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies which column to show. If not specified, the default is *.",
            "name": "field",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter customers by customer identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter customers by customer name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi",
            "description": "filter customers by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter customers by risk score provider",
            "name": "risk_score_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies the range of max risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis:low,high).",
            "name": "max_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies the range of average risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis:low,high).",
            "name": "avg_risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter customers by labels from KYT service searched",
            "name": "label",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter customers by a range of last screened date(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "last_screened",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.GetCustomersResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "create customers",
        "parameters": [
          {
            "description": "post /customers params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostCustomersParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "update customers",
        "parameters": [
          {
            "description": "patch /customers params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchCustomersParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "get specific customer detail",
        "parameters": [
          {
            "type": "string",
            "description": "customer identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/schema.GetCustomerResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/oauth": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "get oauth token",
        "parameters": [
          {
            "description": "post /oauth param",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.PostOauthParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/schema.PostOauthResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "oauth"
        ],
        "summary": "delete oauth token from database",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "services"
        ],
        "summary": "get services",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "id",
                "created_at",
                "updated_at",
                "provider",
                "type",
                "is_active",
                "status",
                "start_time",
                "end_time",
                "settings",
                "credential"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies which column to show. If not specified, the default is *.",
            "name": "field",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by service identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis",
                "ComplyAdvantage"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by provider",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi",
            "description": "filter services by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "activated",
                "deactivated",
                "disabled",
                "upcoming",
                "expired"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by a range of start time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by a range of end time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "query",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.Service"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "services"
        ],
        "summary": "create services",
        "parameters": [
          {
            "description": "post /services params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostServicesParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "services"
        ],
        "summary": "update services",
        "parameters": [
          {
            "description": "patch /services params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchServicesParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/services/supported": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only allow admin to use this method",
        "tags": [
          "services"
        ],
        "summary": "get supported services and its config",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "id",
                "created_at",
                "updated_at",
                "provider",
                "type",
                "is_active",
                "credential",
                "settings",
                "editable"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "only show specific columns",
            "name": "field",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by service identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis",
                "ComplyAdvantage"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by provider",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter services by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi",
            "description": "filter services by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi",
            "description": "filter services by editable",
            "name": "editable",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/model.SupportedService"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "get transactions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "id",
                "created_at",
                "updated_at",
                "name",
                "protocol",
                "direction",
                "status",
                "status_text",
                "currency_id",
                "address",
                "value",
                "value_usd",
                "tx_id",
                "risk_score_provider",
                "risk_score",
                "labels",
                "sanction_score"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies which column to show. If not specified, the default is *.",
            "name": "field",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by customer name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction address",
            "name": "address",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction id on blockchain",
            "name": "tx_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction currency id",
            "name": "currency_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by a range of last screened(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "last_screened",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by risk score provider",
            "name": "risk_score_provider",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies the range of risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis:low,high).",
            "name": "risk_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
              ],
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Processing",
                "Blocked",
                "Pending On Beneficiary",
                "Transfer To Beneficiary Failed",
                "Pending On Originator",
                "Transfer To Originator Failed",
                "Confirmed",
                "Confirm Failed",
                "Rejected"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction status text",
            "name": "status_text",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies the range of value. This format should be {from,to} (ie.value=0.1,10.5 means filtering transactions by value between 0.1 and 10.5 inclusive).",
            "name": "value",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies the range of sanction screening score. This format should be {from,to} (ie.sanction_score=0.1,10.5 means filtering transactions by sanction_score between 0.1 and 10.5 inclusive).",
            "name": "sanction_score",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "Elliptic",
                "Chainalysis"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter transactions by transaction protocol",
            "name": "protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.GetTransactionsResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "create transactions",
        "parameters": [
          {
            "description": "post /transactions params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostTransactionParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/permission": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "send permission to originator",
        "parameters": [
          {
            "description": "patch /transactions/email-protocol/permission params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchEmailProtocolPermissionParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/email-protocol/verify-token/{token}": {
      "get": {
        "description": "only for email protocol",
        "tags": [
          "transactions/email-protocol"
        ],
        "summary": "test if thirdparty service is available",
        "parameters": [
          {
            "type": "string",
            "description": "JWT token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/permission": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "send permission to originator",
        "parameters": [
          {
            "description": "patch /transactions/permission params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchPermissionParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/sanction-report/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "transactions"
        ],
        "summary": "get report from sanction screening service",
        "parameters": [
          {
            "type": "string",
            "description": "an identifier from sanction screening service",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "binary",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/txid": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "send transaction identifier on blockchain to beneficiary",
        "parameters": [
          {
            "description": "patch /transactions/txid params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PatchTxIdParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/wallet-address-filter": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "use /wallet-address-filter from Sygna Bridge and use KYT service by own credential to get address information",
        "parameters": [
          {
            "description": "post /transactions/wallet-address-filter params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostWalletAddressFilterParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/schema.PostWalletAddressFilterResp"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "transactions"
        ],
        "summary": "get specific transaction",
        "parameters": [
          {
            "type": "string",
            "description": "transaction identifier",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/schema.GetTransactionResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "admin could get all users\nnormal user could only get self data",
        "tags": [
          "users"
        ],
        "summary": "get users",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "id",
                "role_id",
                "login_account",
                "is_active",
                "login_type",
                "link_account"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A URL parameter that specifies which column to show. If not specified, the default is *.",
            "name": "field",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter users by identifier",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "filter users by role identifier(0:admin 1:normal user)",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter users by login account",
            "name": "login_account",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "password",
                "google"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter users by login type(only supported passord and google now)",
            "name": "login_type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter users by link account",
            "name": "link_account",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi",
            "description": "filter users by if status is activated",
            "name": "is_active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "created_at",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "name": "updated_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.RespWithPaging"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.GetUsersNewResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only admin could use this method to create another user with using password to login\nnormal user could use this method to bind third party service loging with same account",
        "tags": [
          "users"
        ],
        "summary": "create users",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "password is already encrypted by bcrypt or not",
            "name": "password_hashed",
            "in": "query"
          },
          {
            "description": "post /users params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostUsersNewParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RespWithMutation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    },
    "/vendors/test": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "only allow admin to use this method\nonly support ComplyAdvantage,Elliptic,Chainalysis for provider now\nonly support Blockchain Analytics,Sanction Screening for type now",
        "tags": [
          "vendors"
        ],
        "summary": "test if thirdparty service is available",
        "parameters": [
          {
            "description": "post /vendors/test params",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.PostVendorsTestParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/schema.Resp"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/schema.PostVendorsTestResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.SystemError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errors.SystemError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "extra_data": {
          "type": "object"
        },
        "help": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stack": {
          "type": "object"
        }
      }
    },
    "model.Service": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "credential": {
          "description": "this field is plain text",
          "type": "object"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "settings": {
          "type": "object"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "model.SupportedService": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "credential": {
          "type": "object"
        },
        "editable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "settings": {
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schema.Address": {
      "type": "object",
      "properties": {
        "address_line": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "address_type": {
          "type": "string"
        },
        "building_name": {
          "type": "string"
        },
        "building_number": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "country_sub_division": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "district_name": {
          "type": "string"
        },
        "floor": {
          "type": "string"
        },
        "post_box": {
          "type": "string"
        },
        "post_code": {
          "type": "string"
        },
        "room": {
          "type": "string"
        },
        "street_name": {
          "type": "string"
        },
        "sub_department": {
          "type": "string"
        },
        "town_location_name": {
          "type": "string"
        },
        "town_name": {
          "type": "string"
        }
      }
    },
    "schema.Asset": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "risk_score": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_usd": {
          "type": "string"
        }
      }
    },
    "schema.BeneficiaryPrivateInfo": {
      "type": "object",
      "properties": {
        "legal_person_name": {
          "type": "string"
        },
        "primary_identifier": {
          "description": "primary_identifier is required and secondary_identifier is optional if customer_type is NaturalPerson ;\nlegal_person_name is required  if customer_type is LegalPerson",
          "type": "string"
        },
        "secondary_identifier": {
          "type": "string"
        }
      }
    },
    "schema.DateAndPlaceOfBirth": {
      "type": "object",
      "properties": {
        "date_of_birth": {
          "type": "string"
        },
        "place_of_birth": {
          "type": "string"
        }
      }
    },
    "schema.GetCurrenciesResp": {
      "type": "object",
      "properties": {
        "currency_id": {
          "description": "crypto currency identifier",
          "type": "string"
        },
        "currency_name": {
          "description": "crypto currency name",
          "type": "string"
        },
        "currency_symbol": {
          "description": "crypto currency symbol",
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        }
      }
    },
    "schema.GetCustomerResp": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.Asset"
          }
        },
        "avg_risk_score": {
          "type": "string"
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "max_risk_score": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schema.GetCustomersResp": {
      "type": "object",
      "properties": {
        "avg_risk_score": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "max_risk_score": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schema.GetTransactionResp": {
      "type": "object",
      "required": [
        "address",
        "created_at",
        "currency_id",
        "direction",
        "id",
        "name",
        "protocol",
        "status",
        "status_text",
        "updated_at",
        "value"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/schema.GetCustomerResp"
        },
        "direction": {
          "type": "integer"
        },
        "high_risk": {
          "description": "if your KYT service is Elliptic, high_risk would be true when maximum risk score of address in this transaction is greater than score which is mantain in /services ;\nif your KYT service is Chainalysis, high_risk would be true when one of addresses is high in result which scanned by Chainalysis\nif sanction_score is greater than 0, high_risk would be true",
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "max_risk_score": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "description": "The default is SYGNA_BRIDGE",
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "sanction_report_link": {
          "description": "sanction_report_link would be valuable if sanction screening service is enabled, it provids a report to download",
          "type": "string"
        },
        "sanction_score": {
          "description": "sanction_score would be valuable if sanction screening service is enabled",
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "status_text": {
          "type": "string"
        },
        "tx_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_usd": {
          "type": "string"
        }
      }
    },
    "schema.GetTransactionsResp": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "direction": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_screened": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "risk_score": {
          "type": "string"
        },
        "risk_score_provider": {
          "type": "string"
        },
        "sanction_score": {
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "status_text": {
          "type": "string"
        },
        "tx_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_usd": {
          "description": "only used in response",
          "type": "string"
        }
      }
    },
    "schema.GetUsersNewResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "link_account": {
          "type": "string"
        },
        "login_account": {
          "type": "string"
        },
        "login_type": {
          "type": "string"
        },
        "role_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schema.NationalIdentification": {
      "type": "object",
      "properties": {
        "country_of_issue": {
          "type": "string"
        },
        "national_identifier": {
          "type": "string"
        },
        "national_identifier_type": {
          "type": "string"
        },
        "registration_authority": {
          "type": "string"
        }
      }
    },
    "schema.PagingResult": {
      "type": "object",
      "required": [
        "has_next",
        "limit",
        "offset",
        "total"
      ],
      "properties": {
        "has_next": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer"
        },
        "next_offset": {
          "description": "next_offset is valuable when has_next is true",
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "schema.PatchAssetParam": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "schema.PatchCustomersParam": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PatchAssetParam"
          }
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        }
      }
    },
    "schema.PatchEmailProtocolPermissionParam": {
      "type": "object",
      "required": [
        "id",
        "permission_status"
      ],
      "properties": {
        "expire_date": {
          "description": "Unix timestamp.To set an expiry date of your transfer request. Bridge will stop relaying transfer requests once the transfer expires.",
          "type": "string"
        },
        "id": {
          "description": "Target transaction identifier which status is Pending On Beneficiary",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "name is required if permission_status is ACCEPTED",
          "type": "string"
        },
        "permission_status": {
          "description": "Status of the transfer permission, currently available values: ACCEPTED, REJECTED.",
          "type": "string",
          "enum": [
            "ACCEPTED",
            "REJECTED"
          ]
        },
        "reject_code": {
          "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string",
          "enum": [
            "BVRC001",
            "BVRC002",
            "BVRC003",
            "BVRC004",
            "BVRC005",
            "BVRC006",
            "BVRC007",
            "BVRC999"
          ]
        },
        "reject_message": {
          "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string"
        }
      }
    },
    "schema.PatchPermissionParam": {
      "type": "object",
      "required": [
        "id",
        "permission_status"
      ],
      "properties": {
        "expire_date": {
          "description": "Unix timestamp.To set an expiry date of your transfer request. Bridge will stop relaying transfer requests once the transfer expires.",
          "type": "string"
        },
        "id": {
          "description": "Target transaction identifier which status is Pending On Beneficiary",
          "type": "string",
          "format": "uuid"
        },
        "permission_status": {
          "description": "Status of the transfer permission, currently available values: ACCEPTED, REJECTED.",
          "type": "string",
          "enum": [
            "ACCEPTED",
            "REJECTED"
          ]
        },
        "reject_code": {
          "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string",
          "enum": [
            "BVRC001",
            "BVRC002",
            "BVRC003",
            "BVRC004",
            "BVRC005",
            "BVRC006",
            "BVRC007",
            "BVRC999"
          ]
        },
        "reject_message": {
          "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
          "type": "string"
        }
      }
    },
    "schema.PatchServicesParam": {
      "type": "object",
      "properties": {
        "credential": {
          "type": "object"
        },
        "is_active": {
          "type": "boolean"
        },
        "provider": {
          "type": "string",
          "enum": [
            "Elliptic",
            "Chainalysis",
            "ComplyAdvantage"
          ]
        },
        "settings": {
          "type": "object"
        },
        "type": {
          "type": "string",
          "enum": [
            "Blockchain Analytics",
            "Sanction Screening"
          ]
        }
      }
    },
    "schema.PatchTxIdParam": {
      "type": "object",
      "required": [
        "id",
        "txid"
      ],
      "properties": {
        "id": {
          "description": "Target transaction identifier which status is Pending On Originator",
          "type": "string",
          "format": "uuid"
        },
        "txid": {
          "description": "Transaction identifier on blockchain",
          "type": "string"
        }
      }
    },
    "schema.PostAssetParam": {
      "type": "object",
      "required": [
        "address",
        "currency_id",
        "value"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "extra_info": {
          "type": "object"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "schema.PostCustomersParam": {
      "type": "object",
      "required": [
        "assets",
        "country",
        "customer_type",
        "name"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/schema.Address"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PostAssetParam"
          }
        },
        "birth": {
          "$ref": "#/definitions/schema.DateAndPlaceOfBirth"
        },
        "country": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_type": {
          "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "name": {
          "type": "string"
        },
        "national": {
          "$ref": "#/definitions/schema.NationalIdentification"
        }
      }
    },
    "schema.PostOauthParam": {
      "type": "object",
      "required": [
        "account",
        "credential"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "credential": {
          "type": "string"
        }
      }
    },
    "schema.PostOauthResp": {
      "type": "object",
      "required": [
        "access_token",
        "expires_in",
        "token_type"
      ],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "example": 604800
        },
        "token_type": {
          "type": "string",
          "example": "bearer"
        }
      }
    },
    "schema.PostServicesParam": {
      "type": "object",
      "required": [
        "credential",
        "provider",
        "type"
      ],
      "properties": {
        "credential": {
          "type": "object"
        },
        "provider": {
          "type": "string",
          "enum": [
            "Elliptic",
            "Chainalysis",
            "ComplyAdvantage"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "Blockchain Analytics",
            "Sanction Screening"
          ]
        }
      }
    },
    "schema.PostTransactionParam": {
      "type": "object",
      "required": [
        "currency_id",
        "customer_id",
        "originator",
        "value"
      ],
      "properties": {
        "beneficiary": {
          "type": "object",
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "extra_info": {
                    "type": "object"
                  }
                }
              }
            },
            "customer_type": {
              "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
              "type": "integer"
            },
            "private_info": {
              "$ref": "#/definitions/schema.BeneficiaryPrivateInfo"
            },
            "vasp_code": {
              "type": "string"
            }
          }
        },
        "currency_id": {
          "description": "Choose target currency identifier from GET /currencies",
          "type": "string"
        },
        "customer_id": {
          "description": "Choose target identifier from GET /customers",
          "type": "string"
        },
        "originator": {
          "description": "Choose asset identifiers from GET /assets/:customerID or input addresses belong to above customer identifier",
          "type": "object",
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "extra_info": {
                    "type": "object"
                  }
                }
              }
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "protocol": {
          "type": "string",
          "enum": [
            "null",
            "SYGNA_BRIDGE",
            "SYGNA_EMAIL_PROTOCOL"
          ],
          "x-nullable": true
        },
        "protocol_extra_info": {
          "type": "object"
        },
        "value": {
          "description": "The value of the currency requested to transfer.",
          "type": "string"
        }
      }
    },
    "schema.PostUsersNewParam": {
      "type": "object",
      "required": [
        "link_account",
        "login_account",
        "login_type"
      ],
      "properties": {
        "credential": {
          "description": "It's required if login_type is password",
          "type": "string"
        },
        "link_account": {
          "type": "string"
        },
        "login_account": {
          "type": "string"
        },
        "login_type": {
          "type": "string",
          "enum": [
            "password",
            "google"
          ]
        },
        "role_id": {
          "description": "only admin could specific role_id when creating user ;\nIf not specified, the default is 1(normal user)",
          "type": "integer"
        }
      }
    },
    "schema.PostVendorsTestParam": {
      "type": "object",
      "required": [
        "credential",
        "provider",
        "type"
      ],
      "properties": {
        "credential": {
          "description": "credential\n* provider:Elliptic,type:Blockchain Analytics - api_key and secret are required\n* provider:Chainalysis,type:Blockchain Analytics - api_key is required\n* provider:ComplyAdvantage,type:Sanction Screening - api_key is required",
          "type": "object"
        },
        "provider": {
          "type": "string",
          "enum": [
            "Elliptic",
            "Chainalysis",
            "ComplyAdvantage"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "Blockchain Analytics",
            "Sanction Screening"
          ]
        }
      }
    },
    "schema.PostVendorsTestResp": {
      "type": "object",
      "required": [
        "provider",
        "status_code",
        "type"
      ],
      "properties": {
        "error_message": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "status_code": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schema.PostWalletAddressFilterParam": {
      "type": "object",
      "required": [
        "addrs",
        "currency_id"
      ],
      "properties": {
        "addrs": {
          "description": "addresses which are searching information by Sygna Bridge and specific KYT service",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currency_id": {
          "description": "choose target currency identifier from GET /currencies",
          "type": "string"
        }
      }
    },
    "schema.PostWalletAddressFilterResp": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currency_id": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/errors.SystemError"
        },
        "extra_data": {
          "type": "object",
          "additionalProperties": true
        },
        "is_vasp": {
          "description": "the address if is belong to a VASP",
          "type": "boolean"
        },
        "success": {
          "description": "there is only error attribute if success is false;otherwise, there are another attributes",
          "type": "boolean"
        },
        "type": {
          "description": "the address is belong to which type",
          "type": "string",
          "enum": [
            "SYGNA_BRIDGE",
            "SYGNA_EMAIL_PROTOCOL",
            "PRIVATE_WALLET",
            "OTHER_VASP",
            "UNKNOWN",
            "FAILED"
          ]
        }
      }
    },
    "schema.Resp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        }
      }
    },
    "schema.RespWithMutation": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "success"
            ],
            "properties": {
              "error": {
                "$ref": "#/definitions/errors.SystemError"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "schema.RespWithPaging": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "paging": {
          "$ref": "#/definitions/schema.PagingResult"
        }
      }
    },
    "schema.RespWithStatus": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string",
              "example": "OK"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}